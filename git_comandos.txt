estados de un archivo
untracked
tracked con el add cambia a tracket y preparado para commit 
modified una vez que se modifica hay q hacer un add para que lo agregue a staged 
staged todo lo que esta listo para el snapshot
snapshot


	git init
inicializa y lo convierte en un directorio git

todo lo que ponemos aca se va a seguir

git config user.name "walterm"
git config user.email "mir.walter@gmail.com"

si queremos que sea para todos los repositorios: git config 	--global user.name "walterm"

git status
estatus del repositorio

git add . 
agrega todo de lo contrario hay que decirle cual es el archivo que se quiere subir

git commit -m "mensaje" 
ss
cuando modificamos un archivo git nos lo muestra pero si hacemos commit no lo sube. para que lo suba hay que hacer un git add


git log 
git log -p muestra que cambio
git log -2 para ver las dos ultimas
git log --oneline Te muestra todos los commit en una sola linea
git log --graph
git log --since=2.days te muestra los dos ultimos dias
git log --since = "2014-01-01" 
git log --after = "2014-01-01" 
git log --until  = 
git log --before = 
git log author= "walter"
se pueden convinar
git help log
como ver el estado del proyecto
git checkout permite cambiar de rama para revisar algo
git checkout ee18654
luego se puede hacer un branch de ese checkout -- para irnos atras en el tiempo.
ojo porque cambia el head
git checkout master para volver

para renombrar
git mv foo.txt bar.txt queda listo para el snapshop
para borrar
git rm bar.txt queda listo para el snapshop

git ignore
archivo para que git ignore ciertos archivos

crear archivo .gitignore
en el archivo poner
*.swp toso seran ignorados
.txt todos los txts
#para comentarios dentro de .gitignore 
este archivo hay que agregarlo con git add .gitignore

head -> ultimo commit de la rama

git diff
git diff 2a03333
nos va a decir las diferencia con el reposiorio actual y el que le pasamos 2a...

gitk se puede ver de forma grafica.

como cambiamos el texto del commit q n nos gusta
git commit --amend tambien se usa si queremos agregar un archivo lo que permite es editar el ùltimo commit

si pusimos algo en el staging para sacarlo 
git reset HEAD test.txt lo vuelve a poner en el formato modified.

si tengo un archivo modificado y lo quiero volver como estaba antes:
git checkout -- test.txt

para volver atras todo el repositorio al ultimo snapshot
git reset HEAD --hard

el ultimo commit que hicimos fuen un error como lo vuelvo atras
git reset HEAD^ --hard	

remoto
--------

git clone url directorio

git remote -v nos muestra el origin que es el default
git remote show origin
 un repositorio puede tener multiples remotos.


Si quiero subir a un repositorio nuevo

git remote add origin https://github.com/waltermir/curso_git.git
git push -u origin master


git remote -v para ver que remoto estoy usando

git remote rename origin origen

si lo quiero borrar

git remote rm origen

git fetch te permite traer los cambios 	que hay en un repositorio
git pull te trae los datos y los mergea con tu repositorio
git push enviar cambios al repositorio remoto

para clonar un repositorio en la misma pc
git clone /users/jorge/testgit/.git testgit2 


git config -l
si quiero hacer como que soy otra persona
git config user.name = "juan perez"

si se modifica el repositorio remoto si quiero traer los cambios sib modificar mis archivos
git fetch origin master

para traer los datos modificados
git merge origin master

git pull hace primero un git fetch y luego un git merge.

git pull origin master

git puh empujar datos

------------------
--RAMIFICACIONES--
------------------

master es la rama principal puede ser la que esta en prod
puede haber ramos de develpment o test

git branch prueba
git branch para ver las pruebas
para cambiarnos a la rama pruebas hacer git checkout
git checkout prueba

incorporar cambios en la rama master
git checkout master
git merge prueba

Para borrar una rama 
tengo que estar fuera de la rama
git branch -d prueba

herramientas

git stash por si quiero guardar todo el trabajo que hice en un temporal
git stash list  para ver todos los stash
	
git stash apply te aplica el ultimo stash
sino le tenemos que indicar que stash queremos recuperar

git cherry-pick para comitear un snapshot especifico
git cherry-pick 172fac3








